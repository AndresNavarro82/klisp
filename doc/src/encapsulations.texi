@c -*-texinfo-*-
@setfilename ../src/encapsulations

@node Encapsulations, Promises, Continuations, Top
@comment  node-name,  next,  previous,  up

@chapter Encapsulations
@cindex encapsulations

An encapsulation is an object that refers to another object, called
its content.  The Kernel data type encapsulation is encapsulated.  Two
encapsulations are @code{equal?} iff they are @code{eq?}.
Encapsulations are immutable.

@c TODO this is a little spartan... maybe add some more content
@deffn Applicative make-encapsulation-type (make-encapsulation-type)
  Returns a list of the form @code{(e p? d)}, where @code{e},
@code{p}?, and @code{d} are applicatives, as follows.  Each call to
@code{make-encapsulation-type} returns different applicatives
@code{e}, @code{p?}, and @code{d}.  

@itemize @bullet
@item
@code{e} is an applicative that takes one argument, and returns a
fresh encapsulation with the argument as content.  Encapsulations
returned on different occasions are not @code{eq?}.

@item
@code{p?} is a primitive type predicate, that takes zero or more
arguments and returns true iff all of them are encapsulations
generated by @code{e}.

@item
@code{d} is an applicative that takes one argument; if the argument is
not an encapsulation generated by @code{e}, an error is signaled,
otherwise the content of the encapsulation is returned.
@end itemize

That is, the predicate @code{p?} only recognizes, and the decapsulator
@code{d} only extracts the content of, encapsulations created by the
encapsulator @code{e} that was returned by the same call to
@code{make-encapsulation-type}.
@end deffn
