@c -*-texinfo-*-
@setfilename ../src/characters

@node Characters, Ports, Strings, Top
@comment  node-name,  next,  previous,  up

@chapter Characters
@cindex characters

  A character is an object that represents an ASCII character (for
now, only ASCII is supported in klisp, in the future, full UNICODE
will be supported).  

The external representation of characters consists of a leading ``#\''
and the character or character name or ``#\x'' followed by the hex
unicode code point (only ASCII supported for now).  The supported
names for now are ``null'', ``alarm'', ``backspace'', ``tab'',
``newline'', ``return'', ``escape'', ``space'', ``delete'', ``vtab'',
and ``formfeed'' (this is a combination of the ones accepted in r6rs
and r7rs).

Characters are immutable.  The character type is encapsulated.

  SOURCE NOTE: This section is still missing from the report.  The
features defined here were taken mostly from r7rs.

@deffn Applicative char? (char? . objects)
  The primitive type predicate for type character.  @code{char?}
returns true iff all the objects in @code{objects} are of type
character.
@end deffn

@deffn Applicative char=? (char=? . chars)
@deffnx Applicative char<? (char<? . chars)
@deffnx Applicative char<=? (char<=? . chars)
@deffnx Applicative char>? (char>? . chars)
@deffnx Applicative char>=? (char>=? . chars)
  These predicates compare any number of characters using their
ASCII value for the comparison.
@end deffn

@deffn Applicative char-ci=? (char-ci=? . chars)
@deffnx Applicative char-ci<? (char-ci<? . chars)
@deffnx Applicative char-ci<=? (char-ci<=? . chars)
@deffnx Applicative char-ci>? (char-ci>? . chars)
@deffnx Applicative char-ci>=? (char-ci>=? . chars)
  These predicates convert the chars to lowercase and then compare
their ASCII values.
@end deffn

@deffn Applicative char-alphabetic? (char-alphabetic? . chars) 
@deffnx Applicative char-numeric? (char-numeric? . chars) 
@deffnx Applicative char-whitespace? (char-whitespace? . chars) 
  These predicates return true iff all of their arguments are
respectively ``alphabetic'', ``numeric'', or ``whitespace''.
@end deffn

@deffn Applicative char-upper-case? (char-upper-case? . chars) 
@deffnx Applicative char-lower-case? (char-lower-case? . chars) 
@deffnx Applicative char-title-case? (char-title-case? . chars) 
These predicates return true iff all of their arguments are
respectively ``upper case, ``lower case'', or ``title case''.

Currently klisp only supports ASCII, so there are no title-cased
characters (i.e. @code{char-title-case?} always returns false).
@end deffn

@deffn Applicative char-upcase (char-upcase char) 
@deffnx Applicative char-downcase (char-downcase char) 
@deffnx Applicative char-titlecase (char-downcase char) 
@deffnx Applicative char-foldcase (char-downcase char) 
These applicatives return a character @code{char2} so that:
@example
(char-ci=? char char2) @result{} #t
@end example

If @code{char} is alphabetic then the following holds:

@example
(char-upper-case? (char-upcase char)) @result{} #t
(char-lower-case? (char-downcase char)) @result{} #t
@end example

Currently klisp only supports ASCII, so @code{char-foldcase} behaves
as @code{char-downcase} and @code{char-titlecase} behaves as
@code{char-upcase}.
@end deffn

@deffn Applicative char->integer (char->integer char)
@deffnx Applicative integer->char (integer->char k)
  These applicatives convert between ASCII values (as exact integers
between 0 and 127) and characters.  If an integer that is out of range
for ASCII characters is passed to @code{integer->char}, an error is
signaled.
@end deffn

@deffn Applicative char-digit? (char-digit? char [base])
@code{base} must be an exact integer, between 2 and 36, it omitted it
defaults to @code{10}.

Applicative @code{char-digit?} is a predicate that returns true iff
@code{char} is a digit in base @code{base}.  If @code{base} is greater
than 10, then either upper case or lower case letters can be used.

SOURCE NOTE:  This is like char-numeric? but with bases other than 10.
@end deffn

@deffn Applicative char->digit (char->digit char [base])
@deffnx Applicative digit->char (digit->char digit [base])
@code{base} must be an exact integer, between 2 and 36, it omitted it
defaults to @code{10}.  In @code{char->digit}, @code{char} should be a
character such that
@example 
(char-digit? char base) @result{} #t 
@end example
In @code{digit->char}, @code{digit} should be an exact integer such
that
@example
(>=? (- base 1) digit 0) @result{} #t
@end example

These two applicatives convert between chars representing digits and
the corresponding integer values, in arbitrary bases (between 2 and
36).

@code{char->digit} accepts either lower or upper case characters (if
the base is greater than 10), @code{digit->char} always returns
lower characters (or numbers of course).

SOURCE NOTE: These are like r7rs digit-value but augmented with a
base argument.
@end deffn
