* Release 0.3
** modules:
*** simple modules (something inspired in r7rs) (r7rs)
** documentation:
*** update the manual with the current features
*** add a section to the manual with the interpreter usage
* Release 0.4+
** refactor:
*** clean stand alone interpreter
*** double check combiner names to be verbs 
    - add get- where appropriate
*** split kghelpers 
    - knumber.h knumber.c (kfinitep, kintegerp, etc)
*** naming convention for ground operative functions
    - maybe add "kgop_"
    - use 'P' instead of 'p' for ground predicates
*** naming convention for continuation functions
    - intead of "do_"
*** use krooted_vars_push more to avoid clutter
    - when creating continuations
*** Study differrent c interfaces 
    - maybe a stack like in lua would be better than dealing with gc guarding
*** eliminate all remaining char * arguments where not needed
    - typep
*** remove most of inline declarations
*** standarize size type
    - do a typedef
    - currently
      - int32_t (used in lists)
      - uint32_t (used in strings, vectors and bytevectors)
** fix:
*** fix char-ready? and u8-ready? (r7rs)
** reader/writer
*** syntax support for complex numbers (Kernel report)
*** unicode support
*** add case sensitive option / compiler flag
** library
*** some simplified error guarding (r7rs)
*** $case (r7rs)
*** $case-lambda + $case-vau (r7rs)
*** $named-let + $do (r7rs)
*** $define-record-type (r7rs)
*** eager comprehensions (at least for check.k) see SRFIs 42 and 78 (srfi)
** other
*** restarts (r7rs/common lisp)
*** add restart support to the repl/interpreter (r7rs)
*** complex numbers (Kernel report)
*** interval arithmetic (Kernel report)
** reduce binary size 
*** currently (2011/12/05) is 3megs
  - most of it from kg*.o
  - klisp_assert:
    - almost 1 meg comes from klisp_asserts
    - adds considerably to the compilation time
    - add a flag to enable assertions
      - and disable it by default
      - fix warnings when assertions are turned off 
	- unitialized uses
	- unused variables
  - debugging symbols:
    - 1 meg and a half comes from debugging symbols
    - adds to the compilation time
    - add a flag 
      - maybe the same as for asserts
      - maybe another one
      - disable it by default
  - Even after disabling these two, the size is 500k
  - Continue investigating and try to make it lower
