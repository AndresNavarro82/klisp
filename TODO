* refactor:
** double check combiner names to be verbs 
   (e.g. add get- where appropriate)
** split kghelpers in appropriate parts
  (e.g. create knumber.h knumber.c and move there kfinitep, kintegerp, etc
  from kgnumbers)
** use some convention for ground operative underlaying function names
   maybe add "kgop_"
** use a better convention for continuation underlaying function names
** try to use krooted_vars_push more to save some lines and avoid
   clutter (e.g. when creating continuations)
** Study differrent c interfaces (maybe a stack like in lua would be
   better than dealing with gc push/pop)
** eliminate all remaining char * arguments where not needed
** check if all inline functions need to be inline
** standarize either int32_t (now used in lists) or uint32_t (now used
   in strings, vectors and bytevectors) for sizes (and maybe use a 
   typedef like lua)
* fix:
** fix char-ready? and u8-ready? (r7rs)
* documentation
** update the manual with the current features
** add a section to the manual with the interpreter usage
* applicatives: 
** number->string (r7rs)
** string->number (r7rs)
* reader/writer
** syntax support for complex numbers (Kernel report)
* library
** some simplified error guarding (r7rs)
** $case (r7rs)
** $case-lambda + $case-vau (r7rs)
** $named-let + $do (r7rs)
** $define-record-type (r7rs)
** eager comprehensions (at least for check.k) see SRFIs 42 and 78
   (srfi)
* other
** restarts (r7rs/common lisp)
** add restart support to the repl/interpreter (r7rs)
** simple modules (something inspired in r7rs) (r7rs)
** add modules support to the interpreter (r7rs)
** complex numbers (Kernel report)
** interval arithmetic (Kernel report)
